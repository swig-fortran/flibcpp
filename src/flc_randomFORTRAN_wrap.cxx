/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2+fortran
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Flibcpp project, https://github.com/swig-fortran/flibcpp
 * Copyright (c) 2019 Oak Ridge National Laboratory, UT-Battelle, LLC.
 * Distributed under an MIT open source license: see LICENSE for details.
 */



#ifndef SWIGFORTRAN
#define SWIGFORTRAN
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}

#define SWIGPOLICY_std_mt19937 swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_mt19937_64 swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdint.h>


#include <random>
#if defined(_MSC_VER) && _MSC_VER < 1900
// Visual studio 2012's standard library lacks iterator constructors for
// std::discrete_distribution
#define FLC_MISSING_DISCRETE_ITER
#endif


template<class D, class G, class T>
static inline void flc_generate(D dist, G& g, T* data, size_t size) {
  T* const end = data + size;
  while (data != end) {
    *data++ = dist(g);
  }
}


template<class T, class G>
static void uniform_int_distribution(T left, T right,
                                     G& engine, T* DATA, size_t DATASIZE) {
  flc_generate(std::uniform_int_distribution<T>(left, right),
               engine, DATA, DATASIZE);
}

template<class T, class G>
static void uniform_real_distribution(T left, T right,
                                      G& engine, T* DATA, size_t DATASIZE) {
  flc_generate(std::uniform_real_distribution<T>(left, right),
               engine, DATA, DATASIZE);
}

template<class T, class G>
static void normal_distribution(T mean, T stddev,
                                G& engine, T* DATA, size_t DATASIZE) {
  flc_generate(std::normal_distribution<T>(mean, stddev),
               engine, DATA, DATASIZE);
}

template<class T, class G>
static void discrete_distribution(const double* WEIGHTS, size_t WEIGHTSIZE,
                                  G& engine, T* DATA, size_t DATASIZE) {
#ifndef FLC_MISSING_DISCRETE_ITER
  std::discrete_distribution<T> dist(WEIGHTS, WEIGHTS + WEIGHTSIZE);
#else
  std::discrete_distribution<T> dist(
      std::initializer_list<double>(WEIGHTS, WEIGHTS + WEIGHTSIZE));
#endif
  T* const end = DATA + DATASIZE;
  while (DATA != end) {
    *DATA++ = dist(engine) + 1; // Note: transform to Fortran 1-offset
  }
}


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}



#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}

extern "C" {
SWIGEXPORT SwigClassWrapper _wrap_new_MersenneEngine4__SWIG_0() {
  SwigClassWrapper fresult ;
  std::mt19937 *result = 0 ;
  
  result = (std::mt19937 *)new std::mt19937();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_MersenneEngine4__SWIG_1(int32_t const *farg1) {
  SwigClassWrapper fresult ;
  std::mt19937::result_type arg1 ;
  std::mt19937 *result = 0 ;
  
  arg1 = (std::mt19937::result_type)(*farg1);
  result = (std::mt19937 *)new std::mt19937(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_MersenneEngine4_seed(SwigClassWrapper *farg1, int32_t const *farg2) {
  std::mt19937 *arg1 = (std::mt19937 *) 0 ;
  std::mt19937::result_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 *", "MersenneEngine4", "std::mt19937::seed(std::mt19937::result_type)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (std::mt19937::result_type)(*farg2);
  (arg1)->seed(arg2);
}


SWIGEXPORT void _wrap_MersenneEngine4_discard(SwigClassWrapper *farg1, long long const *farg2) {
  std::mt19937 *arg1 = (std::mt19937 *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 *", "MersenneEngine4", "std::mt19937::discard(unsigned long long)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (unsigned long long)(*farg2);
  (arg1)->discard(arg2);
}


SWIGEXPORT int32_t _wrap_MersenneEngine4_next(SwigClassWrapper *farg1) {
  int32_t fresult ;
  std::mt19937 *arg1 = (std::mt19937 *) 0 ;
  std::mt19937::result_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 *", "MersenneEngine4", "std::mt19937::operator ()()", return 0);
  arg1 = (std::mt19937 *)farg1->cptr;
  result = (arg1)->operator ()();
  fresult = (std::mt19937::result_type)(result);
  return fresult;
}


SWIGEXPORT void _wrap_delete_MersenneEngine4(SwigClassWrapper *farg1) {
  std::mt19937 *arg1 = (std::mt19937 *) 0 ;
  
  arg1 = (std::mt19937 *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_MersenneEngine4_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::mt19937 *arg1 = (std::mt19937 *) 0 ;
  std::mt19937 *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::mt19937, SWIGPOLICY_std_mt19937>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_MersenneEngine8__SWIG_0() {
  SwigClassWrapper fresult ;
  std::mt19937_64 *result = 0 ;
  
  result = (std::mt19937_64 *)new std::mt19937_64();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_MersenneEngine8__SWIG_1(int64_t const *farg1) {
  SwigClassWrapper fresult ;
  std::mt19937_64::result_type arg1 ;
  std::mt19937_64 *result = 0 ;
  
  arg1 = (std::mt19937_64::result_type)(*farg1);
  result = (std::mt19937_64 *)new std::mt19937_64(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_MersenneEngine8_seed(SwigClassWrapper *farg1, int64_t const *farg2) {
  std::mt19937_64 *arg1 = (std::mt19937_64 *) 0 ;
  std::mt19937_64::result_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937_64 *", "MersenneEngine8", "std::mt19937_64::seed(std::mt19937_64::result_type)", return );
  arg1 = (std::mt19937_64 *)farg1->cptr;
  arg2 = (std::mt19937_64::result_type)(*farg2);
  (arg1)->seed(arg2);
}


SWIGEXPORT void _wrap_MersenneEngine8_discard(SwigClassWrapper *farg1, long long const *farg2) {
  std::mt19937_64 *arg1 = (std::mt19937_64 *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937_64 *", "MersenneEngine8", "std::mt19937_64::discard(unsigned long long)", return );
  arg1 = (std::mt19937_64 *)farg1->cptr;
  arg2 = (unsigned long long)(*farg2);
  (arg1)->discard(arg2);
}


SWIGEXPORT int64_t _wrap_MersenneEngine8_next(SwigClassWrapper *farg1) {
  int64_t fresult ;
  std::mt19937_64 *arg1 = (std::mt19937_64 *) 0 ;
  std::mt19937_64::result_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937_64 *", "MersenneEngine8", "std::mt19937_64::operator ()()", return 0);
  arg1 = (std::mt19937_64 *)farg1->cptr;
  result = (arg1)->operator ()();
  fresult = (std::mt19937_64::result_type)(result);
  return fresult;
}


SWIGEXPORT void _wrap_delete_MersenneEngine8(SwigClassWrapper *farg1) {
  std::mt19937_64 *arg1 = (std::mt19937_64 *) 0 ;
  
  arg1 = (std::mt19937_64 *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_MersenneEngine8_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::mt19937_64 *arg1 = (std::mt19937_64 *) 0 ;
  std::mt19937_64 *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::mt19937_64, SWIGPOLICY_std_mt19937_64>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_uniform_int_distribution__SWIG_1(int32_t const *farg1, int32_t const *farg2, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  int32_t arg1 ;
  int32_t arg2 ;
  std::mt19937 *arg3 = 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (int32_t)(*farg1);
  arg2 = (int32_t)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "uniform_int_distribution< int32_t,std::mt19937 >(int32_t,int32_t,std::mt19937 &,int32_t *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (int32_t *)farg4->data;
  arg5 = farg4->size;
  uniform_int_distribution< int32_t,std::mt19937 >(arg1,arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_uniform_int_distribution__SWIG_2(int64_t const *farg1, int64_t const *farg2, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  int64_t arg1 ;
  int64_t arg2 ;
  std::mt19937 *arg3 = 0 ;
  int64_t *arg4 = (int64_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (int64_t)(*farg1);
  arg2 = (int64_t)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "uniform_int_distribution< int64_t,std::mt19937 >(int64_t,int64_t,std::mt19937 &,int64_t *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (int64_t *)farg4->data;
  arg5 = farg4->size;
  uniform_int_distribution< int64_t,std::mt19937 >(arg1,arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_uniform_real_distribution(double const *farg1, double const *farg2, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  double arg1 ;
  double arg2 ;
  std::mt19937 *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  
  arg1 = (double)(*farg1);
  arg2 = (double)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "uniform_real_distribution< double,std::mt19937 >(double,double,std::mt19937 &,double *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (double *)farg4->data;
  arg5 = farg4->size;
  uniform_real_distribution< double,std::mt19937 >(arg1,arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_normal_distribution(double const *farg1, double const *farg2, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  double arg1 ;
  double arg2 ;
  std::mt19937 *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  
  arg1 = (double)(*farg1);
  arg2 = (double)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "normal_distribution< double,std::mt19937 >(double,double,std::mt19937 &,double *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (double *)farg4->data;
  arg5 = farg4->size;
  normal_distribution< double,std::mt19937 >(arg1,arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_discrete_distribution__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  std::mt19937 *arg3 = 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "discrete_distribution< int32_t,std::mt19937 >(double const *,size_t,std::mt19937 &,int32_t *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (int32_t *)farg4->data;
  arg5 = farg4->size;
  discrete_distribution< int32_t,std::mt19937 >((double const *)arg1,arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_discrete_distribution__SWIG_2(SwigArrayWrapper *farg1, SwigClassWrapper *farg3, SwigArrayWrapper *farg4) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  std::mt19937 *arg3 = 0 ;
  int64_t *arg4 = (int64_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  SWIG_check_nonnull(farg3->cptr, "std::mt19937 &", "MersenneEngine4", "discrete_distribution< int64_t,std::mt19937 >(double const *,size_t,std::mt19937 &,int64_t *,size_t)", return );
  arg3 = (std::mt19937 *)farg3->cptr;
  arg4 = (int64_t *)farg4->data;
  arg5 = farg4->size;
  discrete_distribution< int64_t,std::mt19937 >((double const *)arg1,arg2,*arg3,arg4,arg5);
}


} // extern

