/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2+fortran
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Flibcpp project, https://github.com/swig-fortran/flibcpp
 * Copyright (c) 2019-2020 Oak Ridge National Laboratory, UT-Battelle, LLC.
 * Distributed under an MIT open source license: see LICENSE for details.
 */



#ifndef SWIGFORTRAN
#define SWIGFORTRAN
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}

#define SWIGPOLICY_std_map_Sl_int_Sc_int_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_string swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_map_Sl_std_string_Sc_int_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_map_Sl_std_string_Sc_std_string_Sg_ swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdint.h>


#include <map>


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}

SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__insert(std::map< int,int > *self,int const &k,int const &v){
      std::pair<std::map<int, int, std::less< int > >::iterator, bool> result = self->insert(std::pair<int, int>(k, v));
      return result.second;
    }
SWIGINTERN int const &std_map_Sl_int_Sc_int_Sg__get(std::map< int,int > *self,int const &k){
      return (*self)[k];
    }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__set(std::map< int,int > *self,int const &k,int const &v){
      (*self)[k] = v;
    }

namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}



#include <string>


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}

SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__insert(std::map< std::string,int > *self,std::string const &k,int const &v){
      std::pair<std::map<std::string, int, std::less< std::string > >::iterator, bool> result = self->insert(std::pair<std::string, int>(k, v));
      return result.second;
    }
SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &k){
      return (*self)[k];
    }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &k,int const &v){
      (*self)[k] = v;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__insert(std::map< std::string,std::string > *self,std::string const &k,std::string const &v){
      std::pair<std::map<std::string, std::string, std::less< std::string > >::iterator, bool> result = self->insert(std::pair<std::string, std::string>(k, v));
      return result.second;
    }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &k){
      return (*self)[k];
    }

#include <string.h>

SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &k,std::string const &v){
      (*self)[k] = v;
    }
extern "C" {
SWIGEXPORT SwigClassWrapper _wrap_new_MapIntInt() {
  SwigClassWrapper fresult ;
  std::map< int,int > *result = 0 ;
  
  result = (std::map< int,int > *)new std::map< int,int >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT int _wrap_MapIntInt_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > const *", "MapIntInt", "std::map< int,int >::empty() const", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  result = (bool)((std::map< int,int > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT long _wrap_MapIntInt_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > const *", "MapIntInt", "std::map< int,int >::size() const", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  result = (std::map< int,int >::size_type)((std::map< int,int > const *)arg1)->size();
  fresult = (std::map< int,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT void _wrap_MapIntInt_clear(SwigClassWrapper *farg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > *", "MapIntInt", "std::map< int,int >::clear()", return );
  arg1 = (std::map< int,int > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT long _wrap_MapIntInt_erase(SwigClassWrapper *farg1, int const *farg2) {
  long fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::key_type temp2 ;
  std::map< int,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > *", "MapIntInt", "std::map< int,int >::erase(std::map< int,int >::key_type const &)", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  temp2 = (std::map< int,int >::key_type)(*farg2);
  arg2 = &temp2;
  result = (std::map< int,int >::size_type)(arg1)->erase((std::map< int,int >::key_type const &)*arg2);
  fresult = (std::map< int,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_MapIntInt_count(SwigClassWrapper *farg1, int const *farg2) {
  long fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::key_type temp2 ;
  std::map< int,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > const *", "MapIntInt", "std::map< int,int >::count(std::map< int,int >::key_type const &) const", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  temp2 = (std::map< int,int >::key_type)(*farg2);
  arg2 = &temp2;
  result = (std::map< int,int >::size_type)((std::map< int,int > const *)arg1)->count((std::map< int,int >::key_type const &)*arg2);
  fresult = (std::map< int,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_MapIntInt_insert(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  int fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > *", "MapIntInt", "std::map< int,int >::insert(int const &,int const &)", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  temp2 = (int)(*farg2);
  arg2 = &temp2;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  result = (bool)std_map_Sl_int_Sc_int_Sg__insert(arg1,(int const &)*arg2,(int const &)*arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_MapIntInt_get(SwigClassWrapper *farg1, int const *farg2) {
  int fresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > *", "MapIntInt", "std::map< int,int >::get(int const &)", return 0);
  arg1 = (std::map< int,int > *)farg1->cptr;
  temp2 = (int)(*farg2);
  arg2 = &temp2;
  result = (int *) &std_map_Sl_int_Sc_int_Sg__get(arg1,(int const &)*arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_MapIntInt_set(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< int,int > *", "MapIntInt", "std::map< int,int >::set(int const &,int const &)", return );
  arg1 = (std::map< int,int > *)farg1->cptr;
  temp2 = (int)(*farg2);
  arg2 = &temp2;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  std_map_Sl_int_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void _wrap_delete_MapIntInt(SwigClassWrapper *farg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  arg1 = (std::map< int,int > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_MapIntInt_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::map< int,int >, SWIGPOLICY_std_map_Sl_int_Sc_int_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_MapStringInt() {
  SwigClassWrapper fresult ;
  std::map< std::string,int > *result = 0 ;
  
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT int _wrap_MapStringInt_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > const *", "MapStringInt", "std::map< std::string,int >::empty() const", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT long _wrap_MapStringInt_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > const *", "MapStringInt", "std::map< std::string,int >::size() const", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  result = (std::map< std::string,int >::size_type)((std::map< std::string,int > const *)arg1)->size();
  fresult = (std::map< std::string,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT void _wrap_MapStringInt_clear(SwigClassWrapper *farg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > *", "MapStringInt", "std::map< std::string,int >::clear()", return );
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT long _wrap_MapStringInt_erase(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  long fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::string tempstr2 ;
  std::map< std::string,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > *", "MapStringInt", "std::map< std::string,int >::erase(std::map< std::string,int >::key_type const &)", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::map< std::string,int >::size_type)(arg1)->erase((std::map< std::string,int >::key_type const &)*arg2);
  fresult = (std::map< std::string,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_MapStringInt_count(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  long fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::string tempstr2 ;
  std::map< std::string,int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > const *", "MapStringInt", "std::map< std::string,int >::count(std::map< std::string,int >::key_type const &) const", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::map< std::string,int >::size_type)((std::map< std::string,int > const *)arg1)->count((std::map< std::string,int >::key_type const &)*arg2);
  fresult = (std::map< std::string,int >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_MapStringInt_insert(SwigClassWrapper *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  int fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  std::string tempstr2 ;
  int temp3 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > *", "MapStringInt", "std::map< std::string,int >::insert(std::string const &,int const &)", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__insert(arg1,(std::string const &)*arg2,(int const &)*arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_MapStringInt_get(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  int fresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > *", "MapStringInt", "std::map< std::string,int >::get(std::string const &)", return 0);
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_MapStringInt_set(SwigClassWrapper *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  std::string tempstr2 ;
  int temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,int > *", "MapStringInt", "std::map< std::string,int >::set(std::string const &,int const &)", return );
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void _wrap_delete_MapStringInt(SwigClassWrapper *farg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  arg1 = (std::map< std::string,int > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_MapStringInt_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::map< std::string,int >, SWIGPOLICY_std_map_Sl_std_string_Sc_int_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_MapStringString() {
  SwigClassWrapper fresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT int _wrap_MapStringString_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > const *", "MapStringString", "std::map< std::string,std::string >::empty() const", return 0);
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT long _wrap_MapStringString_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > const *", "MapStringString", "std::map< std::string,std::string >::size() const", return 0);
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  result = (std::map< std::string,std::string >::size_type)((std::map< std::string,std::string > const *)arg1)->size();
  fresult = (std::map< std::string,std::string >::size_type)(result);
  return fresult;
}


SWIGEXPORT void _wrap_MapStringString_clear(SwigClassWrapper *farg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > *", "MapStringString", "std::map< std::string,std::string >::clear()", return );
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT long _wrap_MapStringString_erase(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  long fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::string tempstr2 ;
  std::map< std::string,std::string >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > *", "MapStringString", "std::map< std::string,std::string >::erase(std::map< std::string,std::string >::key_type const &)", return 0);
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::map< std::string,std::string >::size_type)(arg1)->erase((std::map< std::string,std::string >::key_type const &)*arg2);
  fresult = (std::map< std::string,std::string >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_MapStringString_count(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  long fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::string tempstr2 ;
  std::map< std::string,std::string >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > const *", "MapStringString", "std::map< std::string,std::string >::count(std::map< std::string,std::string >::key_type const &) const", return 0);
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::map< std::string,std::string >::size_type)((std::map< std::string,std::string > const *)arg1)->count((std::map< std::string,std::string >::key_type const &)*arg2);
  fresult = (std::map< std::string,std::string >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_MapStringString_insert(SwigClassWrapper *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  int fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string tempstr2 ;
  std::string tempstr3 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > *", "MapStringString", "std::map< std::string,std::string >::insert(std::string const &,std::string const &)", return 0);
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempstr3 = std::string(static_cast<char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__insert(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_MapStringString_get(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  SwigArrayWrapper fresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > *", "MapStringString", "std::map< std::string,std::string >::get(std::string const &)", return SwigArrayWrapper_uninitialized());
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  fresult.size = result->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, result->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_MapStringString_set(SwigClassWrapper *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string tempstr2 ;
  std::string tempstr3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::map< std::string,std::string > *", "MapStringString", "std::map< std::string,std::string >::set(std::string const &,std::string const &)", return );
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  tempstr3 = std::string(static_cast<char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void _wrap_delete_MapStringString(SwigClassWrapper *farg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_MapStringString_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::map< std::string,std::string >, SWIGPOLICY_std_map_Sl_std_string_Sc_std_string_Sg_>(farg1, *farg2);
  
}


} // extern

