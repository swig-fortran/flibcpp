/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Flibcpp project, https://github.com/swig-fortran/flibcpp
 * Copyright (c) 2019 Oak Ridge National Laboratory, UT-Battelle, LLC.
 * Distributed under an MIT open source license: see LICENSE for details.
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(SWIG_CLASS_WRAPPER).cptr) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}


#define SWIG_check_range(INDEX, SIZE, FUNCNAME, RETURNNULL) \
  if (!(INDEX < SIZE)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_IndexError, \
                        "index out of range", RETURNNULL); \
  }

#define SWIGPOLICY_std_vector_Sl_int32_t_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_vector_Sl_int64_t_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_vector_Sl_double_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_string swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_vector_Sl_std_string_Sg_ swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdint.h>


#include <vector>


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}


SWIGINTERN void std_vector_Sl_int32_t_Sg__set(std::vector< int32_t > *self,std::vector< int32_t >::size_type index,int32_t const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int32_t" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN int32_t const &std_vector_Sl_int32_t_Sg__get(std::vector< int32_t > *self,std::vector< int32_t >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int32_t" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__insert(std::vector< int32_t > *self,std::vector< int32_t >::size_type index,int32_t const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""int32_t" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__erase__SWIG_0(std::vector< int32_t > *self,std::vector< int32_t >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int32_t" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__erase__SWIG_1(std::vector< int32_t > *self,std::vector< int32_t >::size_type start_index,std::vector< int32_t >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""int32_t" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""int32_t" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN int32_t &std_vector_Sl_int32_t_Sg__front_ref(std::vector< int32_t > *self){
      return (*self).front();
    }
SWIGINTERN int32_t &std_vector_Sl_int32_t_Sg__back_ref(std::vector< int32_t > *self){
      return (*self).back();
    }
SWIGINTERN int32_t &std_vector_Sl_int32_t_Sg__get_ref(std::vector< int32_t > *self,std::vector< int32_t >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""int32_t" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }

#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}

SWIGINTERN std::vector< int32_t > *new_std_vector_Sl_int32_t_Sg___SWIG_4(int32_t const *DATA,std::vector< int32_t >::size_type SIZE){
    return new std::vector<int32_t>(DATA, DATA + SIZE);
  }
SWIGINTERN void std_vector_Sl_int32_t_Sg__assign(std::vector< int32_t > *self,int32_t const *DATA,std::vector< int32_t >::size_type SIZE){
    self->assign(DATA, DATA + SIZE);
  }
SWIGINTERN std::vector< int32_t > &std_vector_Sl_int32_t_Sg__view(std::vector< int32_t > *self){
    return *self;
  }
SWIGINTERN void std_vector_Sl_int64_t_Sg__set(std::vector< int64_t > *self,std::vector< int64_t >::size_type index,int64_t const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int64_t" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN int64_t const &std_vector_Sl_int64_t_Sg__get(std::vector< int64_t > *self,std::vector< int64_t >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int64_t" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__insert(std::vector< int64_t > *self,std::vector< int64_t >::size_type index,int64_t const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""int64_t" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__erase__SWIG_0(std::vector< int64_t > *self,std::vector< int64_t >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int64_t" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__erase__SWIG_1(std::vector< int64_t > *self,std::vector< int64_t >::size_type start_index,std::vector< int64_t >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""int64_t" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""int64_t" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN int64_t &std_vector_Sl_int64_t_Sg__front_ref(std::vector< int64_t > *self){
      return (*self).front();
    }
SWIGINTERN int64_t &std_vector_Sl_int64_t_Sg__back_ref(std::vector< int64_t > *self){
      return (*self).back();
    }
SWIGINTERN int64_t &std_vector_Sl_int64_t_Sg__get_ref(std::vector< int64_t > *self,std::vector< int64_t >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""int64_t" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }
SWIGINTERN std::vector< int64_t > *new_std_vector_Sl_int64_t_Sg___SWIG_4(int64_t const *DATA,std::vector< int64_t >::size_type SIZE){
    return new std::vector<int64_t>(DATA, DATA + SIZE);
  }
SWIGINTERN void std_vector_Sl_int64_t_Sg__assign(std::vector< int64_t > *self,int64_t const *DATA,std::vector< int64_t >::size_type SIZE){
    self->assign(DATA, DATA + SIZE);
  }
SWIGINTERN std::vector< int64_t > &std_vector_Sl_int64_t_Sg__view(std::vector< int64_t > *self){
    return *self;
  }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,std::vector< double >::size_type index,double const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN double const &std_vector_Sl_double_Sg__get(std::vector< double > *self,std::vector< double >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_double_Sg__insert(std::vector< double > *self,std::vector< double >::size_type index,double const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""double" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::size_type start_index,std::vector< double >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""double" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""double" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN double &std_vector_Sl_double_Sg__front_ref(std::vector< double > *self){
      return (*self).front();
    }
SWIGINTERN double &std_vector_Sl_double_Sg__back_ref(std::vector< double > *self){
      return (*self).back();
    }
SWIGINTERN double &std_vector_Sl_double_Sg__get_ref(std::vector< double > *self,std::vector< double >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""double" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_4(double const *DATA,std::vector< double >::size_type SIZE){
    return new std::vector<double>(DATA, DATA + SIZE);
  }
SWIGINTERN void std_vector_Sl_double_Sg__assign(std::vector< double > *self,double const *DATA,std::vector< double >::size_type SIZE){
    self->assign(DATA, DATA + SIZE);
  }
SWIGINTERN std::vector< double > &std_vector_Sl_double_Sg__view(std::vector< double > *self){
    return *self;
  }

#include <string>


#include <string.h>

SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,std::vector< std::string >::size_type index,std::string const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""std::string" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,std::vector< std::string >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""std::string" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert(std::vector< std::string > *self,std::vector< std::string >::size_type index,std::string const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""std::string" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""std::string" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::size_type start_index,std::vector< std::string >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""std::string" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""std::string" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN std::string &std_vector_Sl_std_string_Sg__front_ref(std::vector< std::string > *self){
      return (*self).front();
    }
SWIGINTERN std::string &std_vector_Sl_std_string_Sg__back_ref(std::vector< std::string > *self){
      return (*self).back();
    }
SWIGINTERN std::string &std_vector_Sl_std_string_Sg__get_ref(std::vector< std::string > *self,std::vector< std::string >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""std::string" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__set_ref(std::vector< std::string > *self,std::vector< std::string >::size_type index,std::string &str){
    SWIG_check_range(index, self->size(),
                     "std::vector<std::string>::set_ref",
                     return);
    (*self)[index] = str;
  }
extern "C" {
SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt4__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< int32_t > *result = 0 ;
  
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt4__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int32_t > *arg1 = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const &", "VectorInt4", "std::vector< int32_t >::vector(std::vector< int32_t > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (std::vector< int32_t > *)new std::vector< int32_t >((std::vector< int32_t > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  SWIG_free_rvalue< std::vector< int32_t >, SWIGPOLICY_std_vector_Sl_int32_t_Sg_ >(*farg1);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt4__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int32_t >::size_type arg1 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (std::vector< int32_t >::size_type)(*farg1);
  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt4__SWIG_3(long const *farg1, int32_t const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< int32_t >::size_type arg1 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (std::vector< int32_t >::size_type)(*farg1);
  temp2 = (int32_t)(*farg2);
  arg2 = &temp2;
  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1,(int32_t const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VectorInt4_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const *", "VectorInt4", "std::vector< int32_t >::size() const", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (std::vector< int32_t >::size_type)((std::vector< int32_t > const *)arg1)->size();
  fresult = (std::vector< int32_t >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VectorInt4_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const *", "VectorInt4", "std::vector< int32_t >::capacity() const", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (std::vector< int32_t >::size_type)((std::vector< int32_t > const *)arg1)->capacity();
  fresult = (std::vector< int32_t >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VectorInt4_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const *", "VectorInt4", "std::vector< int32_t >::empty() const", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (bool)((std::vector< int32_t > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int32_t _wrap_VectorInt4_front(SwigClassWrapper *farg1) {
  int32_t fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const *", "VectorInt4", "std::vector< int32_t >::front() const", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (int32_t *) &((std::vector< int32_t > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT int32_t _wrap_VectorInt4_back(SwigClassWrapper *farg1) {
  int32_t fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > const *", "VectorInt4", "std::vector< int32_t >::back() const", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (int32_t *) &((std::vector< int32_t > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt4_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::reserve(std::vector< int32_t >::size_type)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = (std::vector< int32_t >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VectorInt4_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::resize(std::vector< int32_t >::size_type)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = (std::vector< int32_t >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VectorInt4_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, int32_t const *farg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::resize(std::vector< int32_t >::size_type,int32_t const &)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = (std::vector< int32_t >::size_type)(*farg2);
  temp3 = (int32_t)(*farg3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(int32_t const &)*arg3);
}


SWIGEXPORT void _wrap_VectorInt4_push_back(SwigClassWrapper *farg1, int32_t const *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::push_back(int32_t const &)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  temp2 = (int32_t)(*farg2);
  arg2 = &temp2;
  (arg1)->push_back((int32_t const &)*arg2);
}


SWIGEXPORT void _wrap_VectorInt4_pop_back(SwigClassWrapper *farg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::pop_back()", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VectorInt4_clear(SwigClassWrapper *farg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::clear()", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VectorInt4_set(SwigClassWrapper *farg1, long const *farg2, int32_t const *farg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::set(std::vector< int32_t >::size_type,int32_t const &)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int32_t)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int32_t_Sg__set(arg1,arg2,(int32_t const &)*arg3);
}


SWIGEXPORT int32_t _wrap_VectorInt4_get(SwigClassWrapper *farg1, long const *farg2) {
  int32_t fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::get(std::vector< int32_t >::size_type)", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int32_t *) &std_vector_Sl_int32_t_Sg__get(arg1,arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt4_insert(SwigClassWrapper *farg1, long const *farg2, int32_t const *farg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::insert(std::vector< int32_t >::size_type,int32_t const &)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int32_t)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int32_t_Sg__insert(arg1,arg2,(int32_t const &)*arg3);
}


SWIGEXPORT void _wrap_VectorInt4_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::erase(std::vector< int32_t >::size_type)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_int32_t_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VectorInt4_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  std::vector< int32_t >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::erase(std::vector< int32_t >::size_type,std::vector< int32_t >::size_type)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_int32_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT int32_t * _wrap_VectorInt4_front_ref(SwigClassWrapper *farg1) {
  int32_t * fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::front_ref()", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (int32_t *) &std_vector_Sl_int32_t_Sg__front_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int32_t * _wrap_VectorInt4_back_ref(SwigClassWrapper *farg1) {
  int32_t * fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::back_ref()", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (int32_t *) &std_vector_Sl_int32_t_Sg__back_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int32_t * _wrap_VectorInt4_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  int32_t * fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  int32_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::get_ref(std::vector< int32_t >::size_type)", return 0);
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int32_t *) &std_vector_Sl_int32_t_Sg__get_ref(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt4__SWIG_4(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  result = (std::vector< int32_t > *)new_std_vector_Sl_int32_t_Sg___SWIG_4((int32_t const *)arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt4_assign(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  std::vector< int32_t >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::assign(int32_t const *,std::vector< int32_t >::size_type)", return );
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  arg2 = (int32_t *)farg2->data;
  arg3 = farg2->size;
  std_vector_Sl_int32_t_Sg__assign(arg1,(int32_t const *)arg2,arg3);
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorInt4_view(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int32_t > *", "VectorInt4", "std::vector< int32_t >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  result = (std::vector< int32_t > *) &std_vector_Sl_int32_t_Sg__view(arg1);
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_VectorInt4(SwigClassWrapper *farg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  arg1 = (std::vector< int32_t > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VectorInt4_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< int32_t >, SWIGPOLICY_std_vector_Sl_int32_t_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt8__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< int64_t > *result = 0 ;
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt8__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int64_t > *arg1 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const &", "VectorInt8", "std::vector< int64_t >::vector(std::vector< int64_t > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (std::vector< int64_t > *)new std::vector< int64_t >((std::vector< int64_t > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  SWIG_free_rvalue< std::vector< int64_t >, SWIGPOLICY_std_vector_Sl_int64_t_Sg_ >(*farg1);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt8__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int64_t >::size_type arg1 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (std::vector< int64_t >::size_type)(*farg1);
  result = (std::vector< int64_t > *)new std::vector< int64_t >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt8__SWIG_3(long const *farg1, int64_t const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< int64_t >::size_type arg1 ;
  int64_t *arg2 = 0 ;
  int64_t temp2 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (std::vector< int64_t >::size_type)(*farg1);
  temp2 = (int64_t)(*farg2);
  arg2 = &temp2;
  result = (std::vector< int64_t > *)new std::vector< int64_t >(arg1,(int64_t const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VectorInt8_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const *", "VectorInt8", "std::vector< int64_t >::size() const", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (std::vector< int64_t >::size_type)((std::vector< int64_t > const *)arg1)->size();
  fresult = (std::vector< int64_t >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VectorInt8_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const *", "VectorInt8", "std::vector< int64_t >::capacity() const", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (std::vector< int64_t >::size_type)((std::vector< int64_t > const *)arg1)->capacity();
  fresult = (std::vector< int64_t >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VectorInt8_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const *", "VectorInt8", "std::vector< int64_t >::empty() const", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (bool)((std::vector< int64_t > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int64_t _wrap_VectorInt8_front(SwigClassWrapper *farg1) {
  int64_t fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const *", "VectorInt8", "std::vector< int64_t >::front() const", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (int64_t *) &((std::vector< int64_t > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT int64_t _wrap_VectorInt8_back(SwigClassWrapper *farg1) {
  int64_t fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > const *", "VectorInt8", "std::vector< int64_t >::back() const", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (int64_t *) &((std::vector< int64_t > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt8_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::reserve(std::vector< int64_t >::size_type)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = (std::vector< int64_t >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VectorInt8_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::resize(std::vector< int64_t >::size_type)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = (std::vector< int64_t >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VectorInt8_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, int64_t const *farg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  int64_t *arg3 = 0 ;
  int64_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::resize(std::vector< int64_t >::size_type,int64_t const &)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = (std::vector< int64_t >::size_type)(*farg2);
  temp3 = (int64_t)(*farg3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(int64_t const &)*arg3);
}


SWIGEXPORT void _wrap_VectorInt8_push_back(SwigClassWrapper *farg1, int64_t const *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *arg2 = 0 ;
  int64_t temp2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::push_back(int64_t const &)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  temp2 = (int64_t)(*farg2);
  arg2 = &temp2;
  (arg1)->push_back((int64_t const &)*arg2);
}


SWIGEXPORT void _wrap_VectorInt8_pop_back(SwigClassWrapper *farg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::pop_back()", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VectorInt8_clear(SwigClassWrapper *farg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::clear()", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VectorInt8_set(SwigClassWrapper *farg1, long const *farg2, int64_t const *farg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  int64_t *arg3 = 0 ;
  int64_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::set(std::vector< int64_t >::size_type,int64_t const &)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int64_t)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int64_t_Sg__set(arg1,arg2,(int64_t const &)*arg3);
}


SWIGEXPORT int64_t _wrap_VectorInt8_get(SwigClassWrapper *farg1, long const *farg2) {
  int64_t fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::get(std::vector< int64_t >::size_type)", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int64_t *) &std_vector_Sl_int64_t_Sg__get(arg1,arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt8_insert(SwigClassWrapper *farg1, long const *farg2, int64_t const *farg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  int64_t *arg3 = 0 ;
  int64_t temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::insert(std::vector< int64_t >::size_type,int64_t const &)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int64_t)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int64_t_Sg__insert(arg1,arg2,(int64_t const &)*arg3);
}


SWIGEXPORT void _wrap_VectorInt8_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::erase(std::vector< int64_t >::size_type)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_int64_t_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VectorInt8_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  std::vector< int64_t >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::erase(std::vector< int64_t >::size_type,std::vector< int64_t >::size_type)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_int64_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT int64_t * _wrap_VectorInt8_front_ref(SwigClassWrapper *farg1) {
  int64_t * fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::front_ref()", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (int64_t *) &std_vector_Sl_int64_t_Sg__front_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int64_t * _wrap_VectorInt8_back_ref(SwigClassWrapper *farg1) {
  int64_t * fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::back_ref()", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (int64_t *) &std_vector_Sl_int64_t_Sg__back_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int64_t * _wrap_VectorInt8_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  int64_t * fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  int64_t *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::get_ref(std::vector< int64_t >::size_type)", return 0);
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int64_t *) &std_vector_Sl_int64_t_Sg__get_ref(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorInt8__SWIG_4(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  std::vector< int64_t >::size_type arg2 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  result = (std::vector< int64_t > *)new_std_vector_Sl_int64_t_Sg___SWIG_4((int64_t const *)arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_VectorInt8_assign(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  std::vector< int64_t >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::assign(int64_t const *,std::vector< int64_t >::size_type)", return );
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  arg2 = (int64_t *)farg2->data;
  arg3 = farg2->size;
  std_vector_Sl_int64_t_Sg__assign(arg1,(int64_t const *)arg2,arg3);
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorInt8_view(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< int64_t > *", "VectorInt8", "std::vector< int64_t >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  result = (std::vector< int64_t > *) &std_vector_Sl_int64_t_Sg__view(arg1);
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_VectorInt8(SwigClassWrapper *farg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VectorInt8_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< int64_t >, SWIGPOLICY_std_vector_Sl_int64_t_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorReal8__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorReal8__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const &", "VectorReal8", "std::vector< double >::vector(std::vector< double > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  SWIG_free_rvalue< std::vector< double >, SWIGPOLICY_std_vector_Sl_double_Sg_ >(*farg1);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorReal8__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double >::size_type)(*farg1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorReal8__SWIG_3(long const *farg1, double const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double >::size_type)(*farg1);
  temp2 = (double)(*farg2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VectorReal8_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const *", "VectorReal8", "std::vector< double >::size() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->size();
  fresult = (std::vector< double >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VectorReal8_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const *", "VectorReal8", "std::vector< double >::capacity() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->capacity();
  fresult = (std::vector< double >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VectorReal8_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const *", "VectorReal8", "std::vector< double >::empty() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (bool)((std::vector< double > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT double _wrap_VectorReal8_front(SwigClassWrapper *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const *", "VectorReal8", "std::vector< double >::front() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &((std::vector< double > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT double _wrap_VectorReal8_back(SwigClassWrapper *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > const *", "VectorReal8", "std::vector< double >::back() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &((std::vector< double > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorReal8_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::reserve(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VectorReal8_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::resize(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VectorReal8_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::resize(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(double const &)*arg3);
}


SWIGEXPORT void _wrap_VectorReal8_push_back(SwigClassWrapper *farg1, double const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::push_back(double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  temp2 = (double)(*farg2);
  arg2 = &temp2;
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT void _wrap_VectorReal8_pop_back(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::pop_back()", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VectorReal8_clear(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::clear()", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VectorReal8_set(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::set(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
}


SWIGEXPORT double _wrap_VectorReal8_get(SwigClassWrapper *farg1, long const *farg2) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::get(std::vector< double >::size_type)", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (double *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VectorReal8_insert(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::insert(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_double_Sg__insert(arg1,arg2,(double const &)*arg3);
}


SWIGEXPORT void _wrap_VectorReal8_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::erase(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VectorReal8_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::erase(std::vector< double >::size_type,std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT double * _wrap_VectorReal8_front_ref(SwigClassWrapper *farg1) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::front_ref()", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &std_vector_Sl_double_Sg__front_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT double * _wrap_VectorReal8_back_ref(SwigClassWrapper *farg1) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::back_ref()", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &std_vector_Sl_double_Sg__back_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT double * _wrap_VectorReal8_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::get_ref(std::vector< double >::size_type)", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (double *) &std_vector_Sl_double_Sg__get_ref(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorReal8__SWIG_4(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  double *arg1 = (double *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_4((double const *)arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_VectorReal8_assign(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  std::vector< double >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::assign(double const *,std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (double *)farg2->data;
  arg3 = farg2->size;
  std_vector_Sl_double_Sg__assign(arg1,(double const *)arg2,arg3);
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorReal8_view(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< double > *", "VectorReal8", "std::vector< double >::view()", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double > *) &std_vector_Sl_double_Sg__view(arg1);
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  return fresult;
}


SWIGEXPORT void _wrap_delete_VectorReal8(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VectorReal8_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< double >, SWIGPOLICY_std_vector_Sl_double_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorString__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorString__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const &", "VectorString", "std::vector< std::string >::vector(std::vector< std::string > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  SWIG_free_rvalue< std::vector< std::string >, SWIGPOLICY_std_vector_Sl_std_string_Sg_ >(*farg1);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorString__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string >::size_type)(*farg1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VectorString__SWIG_3(long const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  std::vector< std::string >::size_type arg1 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string >::size_type)(*farg1);
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::string const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VectorString_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const *", "VectorString", "std::vector< std::string >::size() const", return 0);
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::vector< std::string >::size_type)((std::vector< std::string > const *)arg1)->size();
  fresult = (std::vector< std::string >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VectorString_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const *", "VectorString", "std::vector< std::string >::capacity() const", return 0);
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::vector< std::string >::size_type)((std::vector< std::string > const *)arg1)->capacity();
  fresult = (std::vector< std::string >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VectorString_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const *", "VectorString", "std::vector< std::string >::empty() const", return 0);
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorString_front(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const *", "VectorString", "std::vector< std::string >::front() const", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::string *) &((std::vector< std::string > const *)arg1)->front();
  fresult.size = result->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, result->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorString_back(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > const *", "VectorString", "std::vector< std::string >::back() const", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::string *) &((std::vector< std::string > const *)arg1)->back();
  fresult.size = result->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, result->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_VectorString_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::reserve(std::vector< std::string >::size_type)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = (std::vector< std::string >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VectorString_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::resize(std::vector< std::string >::size_type)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = (std::vector< std::string >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VectorString_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, SwigArrayWrapper *farg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *arg3 = 0 ;
  std::string tempstr3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::resize(std::vector< std::string >::size_type,std::string const &)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = (std::vector< std::string >::size_type)(*farg2);
  tempstr3 = std::string(static_cast<char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  (arg1)->resize(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void _wrap_VectorString_push_back(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::push_back(std::string const &)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT void _wrap_VectorString_pop_back(SwigClassWrapper *farg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::pop_back()", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VectorString_clear(SwigClassWrapper *farg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::clear()", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VectorString_set(SwigClassWrapper *farg1, long const *farg2, SwigArrayWrapper *farg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *arg3 = 0 ;
  std::string tempstr3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::set(std::vector< std::string >::size_type,std::string const &)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  tempstr3 = std::string(static_cast<char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT SwigArrayWrapper _wrap_VectorString_get(SwigClassWrapper *farg1, long const *farg2) {
  SwigArrayWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::get(std::vector< std::string >::size_type)", return SwigArrayWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (std::string *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  fresult.size = result->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, result->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_VectorString_insert(SwigClassWrapper *farg1, long const *farg2, SwigArrayWrapper *farg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *arg3 = 0 ;
  std::string tempstr3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::insert(std::vector< std::string >::size_type,std::string const &)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  tempstr3 = std::string(static_cast<char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  std_vector_Sl_std_string_Sg__insert(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT void _wrap_VectorString_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::erase(std::vector< std::string >::size_type)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VectorString_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::size_type arg3 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::erase(std::vector< std::string >::size_type,std::vector< std::string >::size_type)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT SwigClassWrapper _wrap_VectorString_front_ref(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::front_ref()", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::string *) &std_vector_Sl_std_string_Sg__front_ref(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (0 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_VectorString_back_ref(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::back_ref()", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  result = (std::string *) &std_vector_Sl_std_string_Sg__back_ref(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (0 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_VectorString_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *result = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::get_ref(std::vector< std::string >::size_type)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (std::string *) &std_vector_Sl_std_string_Sg__get_ref(arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (0 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_VectorString_set_ref(SwigClassWrapper *farg1, long const *farg2, SwigClassWrapper *farg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::vector< std::string > *", "VectorString", "std::vector< std::string >::set_ref(std::vector< std::string >::size_type,std::string &)", return );
  arg1 = (std::vector< std::string > *)farg1->cptr;
  arg2 = *farg2 - 1;
  SWIG_check_nonnull(*farg3, "std::string &", "string", "std::vector< std::string >::set_ref(std::vector< std::string >::size_type,std::string &)", return );
  arg3 = (std::string *)farg3->cptr;
  std_vector_Sl_std_string_Sg__set_ref(arg1,arg2,*arg3);
  SWIG_free_rvalue< std::string, SWIGPOLICY_std_string >(*farg3);
}


SWIGEXPORT void _wrap_delete_VectorString(SwigClassWrapper *farg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VectorString_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< std::string >, SWIGPOLICY_std_vector_Sl_std_string_Sg_>(farg1, *farg2);
  
}


} // extern

