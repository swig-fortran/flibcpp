/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2+fortran
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Flibcpp project, https://github.com/swig-fortran/flibcpp
 * Copyright (c) 2019 Oak Ridge National Laboratory, UT-Battelle, LLC.
 * Distributed under an MIT open source license: see LICENSE for details.
 */



#ifndef SWIGFORTRAN
#define SWIGFORTRAN
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }

#define SWIGPOLICY_std_mt19937 swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_mt19937_64 swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdint.h>


#include <algorithm>
#include <functional>
#include <numeric>


typedef int index_int;


template<class T, class Compare>
static void sort_impl(T *data, size_t size, Compare cmp) {
    return std::sort(data, data + size, cmp);
}

template<class T, class Compare>
static bool is_sorted_impl(const T *data, size_t size, Compare cmp) {
    return std::is_sorted(data, data + size, cmp);
}

template<class T, class Compare>
static void argsort_impl(const T *data, size_t size,
                         index_int *index, size_t index_size,
                         Compare cmp) {
  // Fill invalid indices with zero
  if (size < index_size) {
    std::fill(index + size, index + index_size, 0);
  }
  size = std::min(size, index_size);
  // Fill the indices with 1 through size
  std::iota(index, index + size, 1);
  // Define a comparator that accesses the original data
  auto int_sort_cmp = [cmp, data](index_int left, index_int right)
  { return cmp(data[left - 1], data[right - 1]); };
  // Let the standard library do all the hard work!
  std::sort(index, index + size, int_sort_cmp);
}



// Operate using default "less than"
template<class T>
static void sort(T *DATA,size_t DATASIZE) {
  return sort_impl(DATA,DATASIZE, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static void sort_cmp(T *DATA,size_t DATASIZE, bool (*cmp)(T, T)) {
  return sort_impl(DATA,DATASIZE, cmp);
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


// Operate using default "less than"
template<class T>
static bool is_sorted(const T *DATA,size_t DATASIZE) {
  return is_sorted_impl(DATA,DATASIZE, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static bool is_sorted_cmp(const T *DATA,size_t DATASIZE, bool (*cmp)(T, T)) {
  return is_sorted_impl(DATA,DATASIZE, cmp);
}


// Operate using default "less than"
template<class T>
static void argsort(const T *DATA,size_t DATASIZE,index_int *IDX,size_t IDXSIZE
) {
  return argsort_impl(DATA,DATASIZE,IDX,IDXSIZE, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static void argsort_cmp(const T *DATA,size_t DATASIZE,index_int *IDX,size_t IDXSIZE
, bool (*cmp)(T, T)) {
  return argsort_impl(DATA,DATASIZE,IDX,IDXSIZE, cmp);
}


template<class T, class Compare>
static index_int binary_search_impl(const T *data, size_t size, T value,
                                    Compare cmp) {
  const T *end = data + size;
  auto iter = std::lower_bound(data, end, value, cmp);
  if (iter == end || cmp(*iter, value) || cmp(value, *iter))
    return 0;
  // Index of the found item *IN FORTAN INDEXING*
  return (iter - data) + 1;
}

template<class T, class Compare>
static void equal_range_impl(const T *data, size_t size, T value,
                             index_int &first_index, index_int &last_index,
                             Compare cmp) {
  const T *end = data + size;
  auto range_pair = std::equal_range(data, end, value, cmp);
  // Index of the min/max items *IN FORTAN INDEXING*
  first_index = range_pair.first - data + 1;
  last_index = range_pair.second - data;
}

template<class T, class Compare>
static void minmax_element_impl(const T *data, size_t size,
                                index_int &min_index, index_int &max_index,
                                Compare cmp) {
  const T *end = data + size;
  auto mm_pair = std::minmax_element(data, end, cmp);
  // Index of the min/max items *IN FORTAN INDEXING*
  min_index = mm_pair.first - data + 1;
  max_index = mm_pair.second - data + 1;
}


// Operate using default "less than"
template<class T>
static index_int binary_search(const T *DATA,size_t DATASIZE,T value) {
  return binary_search_impl(DATA,DATASIZE,value, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static index_int binary_search_cmp(const T *DATA,size_t DATASIZE,T value, bool (*cmp)(T, T)) {
  return binary_search_impl(DATA,DATASIZE,value, cmp);
}


// Operate using default "less than"
template<class T>
static void equal_range(const T *DATA,size_t DATASIZE,T value,index_int &first_index,index_int &last_index
) {
  return equal_range_impl(DATA,DATASIZE,value,first_index,last_index, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static void equal_range_cmp(const T *DATA,size_t DATASIZE,T value,index_int &first_index,index_int &last_index
, bool (*cmp)(T, T)) {
  return equal_range_impl(DATA,DATASIZE,value,first_index,last_index, cmp);
}


// Operate using default "less than"
template<class T>
static void minmax_element(const T *DATA,size_t DATASIZE,index_int &min_index,index_int &max_index
) {
  return minmax_element_impl(DATA,DATASIZE,min_index,max_index, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static void minmax_element_cmp(const T *DATA,size_t DATASIZE,index_int &min_index,index_int &max_index
, bool (*cmp)(T, T)) {
  return minmax_element_impl(DATA,DATASIZE,min_index,max_index, cmp);
}


template<class T, class Compare>
static bool includes_impl(const T *data1, size_t size1,
                          const T *data2, size_t size2,
                          Compare cmp) {
  return std::includes(data1, data1 + size1, data2, data2 + size2, cmp);
}


// Operate using default "less than"
template<class T>
static bool includes(const T *DATA1,size_t DATASIZE1,const T *DATA2,size_t DATASIZE2
) {
  return includes_impl(DATA1,DATASIZE1,DATA2,DATASIZE2, std::less<T>());
}
// Operate using user-provided function pointer
template<class T>
static bool includes_cmp(const T *DATA1,size_t DATASIZE1,const T *DATA2,size_t DATASIZE2
, bool (*cmp)(T, T)) {
  return includes_impl(DATA1,DATASIZE1,DATA2,DATASIZE2, cmp);
}


#include <random>


template<class T>
static void shuffle(std::mt19937& g, T *DATA, size_t DATASIZE) {
    std::shuffle(DATA, DATA + DATASIZE, g);
}


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}

extern "C" {
SWIGEXPORT void _wrap_sort__SWIG_1(SwigArrayWrapper *farg1) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  sort< int32_t >(arg1,arg2);
}


SWIGEXPORT void _wrap_sort__SWIG_2(SwigArrayWrapper *farg1) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  sort< int64_t >(arg1,arg2);
}


SWIGEXPORT void _wrap_sort__SWIG_3(SwigArrayWrapper *farg1) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  sort< double >(arg1,arg2);
}


SWIGEXPORT void _wrap_sort__SWIG_4(SwigArrayWrapper *farg1, bool (*farg3)(int32_t,int32_t)) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  bool (*arg3)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(int32_t,int32_t))(*farg3);
  sort_cmp< int32_t >(arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_sort__SWIG_5(SwigArrayWrapper *farg1, bool (*farg3)(int64_t,int64_t)) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  bool (*arg3)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(int64_t,int64_t))(*farg3);
  sort_cmp< int64_t >(arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_sort__SWIG_6(SwigArrayWrapper *farg1, bool (*farg3)(double,double)) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  bool (*arg3)(double,double) = (bool (*)(double,double)) 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(double,double))(*farg3);
  sort_cmp< double >(arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_sort__SWIG_7(SwigArrayWrapper *farg1, bool (*farg3)(void *,void *)) {
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  bool (*arg3)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(void *,void *))(*farg3);
  sort_cmp< void * >(arg1,arg2,arg3);
}


SWIGEXPORT int _wrap_is_sorted__SWIG_1(SwigArrayWrapper *farg1) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  result = (bool)is_sorted< int32_t >((int32_t const *)arg1,arg2);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_2(SwigArrayWrapper *farg1) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  result = (bool)is_sorted< int64_t >((int64_t const *)arg1,arg2);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_3(SwigArrayWrapper *farg1) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  result = (bool)is_sorted< double >((double const *)arg1,arg2);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_4(SwigArrayWrapper *farg1, bool (*farg3)(int32_t,int32_t)) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  bool (*arg3)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  bool result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(int32_t,int32_t))(*farg3);
  result = (bool)is_sorted_cmp< int32_t >((int32_t const *)arg1,arg2,arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_5(SwigArrayWrapper *farg1, bool (*farg3)(int64_t,int64_t)) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  bool (*arg3)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  bool result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(int64_t,int64_t))(*farg3);
  result = (bool)is_sorted_cmp< int64_t >((int64_t const *)arg1,arg2,arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_6(SwigArrayWrapper *farg1, bool (*farg3)(double,double)) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  bool (*arg3)(double,double) = (bool (*)(double,double)) 0 ;
  bool result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(double,double))(*farg3);
  result = (bool)is_sorted_cmp< double >((double const *)arg1,arg2,arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_is_sorted__SWIG_7(SwigArrayWrapper *farg1, bool (*farg3)(void *,void *)) {
  int fresult ;
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  bool (*arg3)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  bool result;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (bool (*)(void *,void *))(*farg3);
  result = (bool)is_sorted_cmp< void * >((void *const *)arg1,arg2,arg3);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_argsort__SWIG_1(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  argsort< int32_t >((int32_t const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_argsort__SWIG_2(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  argsort< int64_t >((int64_t const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_argsort__SWIG_3(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  argsort< double >((double const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_argsort__SWIG_4(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(int32_t,int32_t)) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  bool (*arg5)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(int32_t,int32_t))(*farg5);
  argsort_cmp< int32_t >((int32_t const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_argsort__SWIG_5(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(int64_t,int64_t)) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  bool (*arg5)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(int64_t,int64_t))(*farg5);
  argsort_cmp< int64_t >((int64_t const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_argsort__SWIG_6(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(double,double)) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  bool (*arg5)(double,double) = (bool (*)(double,double)) 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(double,double))(*farg5);
  argsort_cmp< double >((double const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_argsort__SWIG_7(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(void *,void *)) {
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  index_int *arg3 = (index_int *) 0 ;
  size_t arg4 ;
  bool (*arg5)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(void *,void *))(*farg5);
  argsort_cmp< void * >((void *const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT int _wrap_binary_search__SWIG_1(SwigArrayWrapper *farg1, int32_t const *farg3) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t arg3 ;
  index_int result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t)(*farg3);
  result = (index_int)binary_search< int32_t >((int32_t const *)arg1,arg2,arg3);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_2(SwigArrayWrapper *farg1, int64_t const *farg3) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t arg3 ;
  index_int result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t)(*farg3);
  result = (index_int)binary_search< int64_t >((int64_t const *)arg1,arg2,arg3);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_3(SwigArrayWrapper *farg1, double const *farg3) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  index_int result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double)(*farg3);
  result = (index_int)binary_search< double >((double const *)arg1,arg2,arg3);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_4(SwigArrayWrapper *farg1, int32_t const *farg3, bool (*farg4)(int32_t,int32_t)) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t arg3 ;
  bool (*arg4)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  index_int result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t)(*farg3);
  arg4 = (bool (*)(int32_t,int32_t))(*farg4);
  result = (index_int)binary_search_cmp< int32_t >((int32_t const *)arg1,arg2,arg3,arg4);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_5(SwigArrayWrapper *farg1, int64_t const *farg3, bool (*farg4)(int64_t,int64_t)) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t arg3 ;
  bool (*arg4)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  index_int result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t)(*farg3);
  arg4 = (bool (*)(int64_t,int64_t))(*farg4);
  result = (index_int)binary_search_cmp< int64_t >((int64_t const *)arg1,arg2,arg3,arg4);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_6(SwigArrayWrapper *farg1, double const *farg3, bool (*farg4)(double,double)) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  bool (*arg4)(double,double) = (bool (*)(double,double)) 0 ;
  index_int result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double)(*farg3);
  arg4 = (bool (*)(double,double))(*farg4);
  result = (index_int)binary_search_cmp< double >((double const *)arg1,arg2,arg3,arg4);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_binary_search__SWIG_7(SwigArrayWrapper *farg1, void const **farg3, bool (*farg4)(void *,void *)) {
  int fresult ;
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  bool (*arg4)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  index_int result;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (void *)(*farg3);
  arg4 = (bool (*)(void *,void *))(*farg4);
  result = (index_int)binary_search_cmp< void * >((void *const *)arg1,arg2,arg3,arg4);
  fresult = (index_int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_equal_range__SWIG_1(SwigArrayWrapper *farg1, int32_t const *farg3, int *farg4, int *farg5) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  equal_range< int32_t >((int32_t const *)arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void _wrap_equal_range__SWIG_2(SwigArrayWrapper *farg1, int64_t const *farg3, int *farg4, int *farg5) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  equal_range< int64_t >((int64_t const *)arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void _wrap_equal_range__SWIG_3(SwigArrayWrapper *farg1, double const *farg3, int *farg4, int *farg5) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  equal_range< double >((double const *)arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void _wrap_equal_range__SWIG_4(SwigArrayWrapper *farg1, int32_t const *farg3, int *farg4, int *farg5, bool (*farg6)(int32_t,int32_t)) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  bool (*arg6)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  arg6 = (bool (*)(int32_t,int32_t))(*farg6);
  equal_range_cmp< int32_t >((int32_t const *)arg1,arg2,arg3,*arg4,*arg5,arg6);
}


SWIGEXPORT void _wrap_equal_range__SWIG_5(SwigArrayWrapper *farg1, int64_t const *farg3, int *farg4, int *farg5, bool (*farg6)(int64_t,int64_t)) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  bool (*arg6)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  arg6 = (bool (*)(int64_t,int64_t))(*farg6);
  equal_range_cmp< int64_t >((int64_t const *)arg1,arg2,arg3,*arg4,*arg5,arg6);
}


SWIGEXPORT void _wrap_equal_range__SWIG_6(SwigArrayWrapper *farg1, double const *farg3, int *farg4, int *farg5, bool (*farg6)(double,double)) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  bool (*arg6)(double,double) = (bool (*)(double,double)) 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  arg6 = (bool (*)(double,double))(*farg6);
  equal_range_cmp< double >((double const *)arg1,arg2,arg3,*arg4,*arg5,arg6);
}


SWIGEXPORT void _wrap_equal_range__SWIG_7(SwigArrayWrapper *farg1, void const **farg3, int *farg4, int *farg5, bool (*farg6)(void *,void *)) {
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  index_int *arg4 = 0 ;
  index_int *arg5 = 0 ;
  bool (*arg6)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (void *)(*farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (index_int *)(farg5);
  arg6 = (bool (*)(void *,void *))(*farg6);
  equal_range_cmp< void * >((void *const *)arg1,arg2,arg3,*arg4,*arg5,arg6);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_1(SwigArrayWrapper *farg1, int *farg3, int *farg4) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  minmax_element< int32_t >((int32_t const *)arg1,arg2,*arg3,*arg4);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_2(SwigArrayWrapper *farg1, int *farg3, int *farg4) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  minmax_element< int64_t >((int64_t const *)arg1,arg2,*arg3,*arg4);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_3(SwigArrayWrapper *farg1, int *farg3, int *farg4) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  minmax_element< double >((double const *)arg1,arg2,*arg3,*arg4);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_4(SwigArrayWrapper *farg1, int *farg3, int *farg4, bool (*farg5)(int32_t,int32_t)) {
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  bool (*arg5)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (bool (*)(int32_t,int32_t))(*farg5);
  minmax_element_cmp< int32_t >((int32_t const *)arg1,arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_5(SwigArrayWrapper *farg1, int *farg3, int *farg4, bool (*farg5)(int64_t,int64_t)) {
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  bool (*arg5)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (bool (*)(int64_t,int64_t))(*farg5);
  minmax_element_cmp< int64_t >((int64_t const *)arg1,arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_6(SwigArrayWrapper *farg1, int *farg3, int *farg4, bool (*farg5)(double,double)) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  bool (*arg5)(double,double) = (bool (*)(double,double)) 0 ;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (bool (*)(double,double))(*farg5);
  minmax_element_cmp< double >((double const *)arg1,arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void _wrap_minmax_element__SWIG_7(SwigArrayWrapper *farg1, int *farg3, int *farg4, bool (*farg5)(void *,void *)) {
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  index_int *arg3 = 0 ;
  index_int *arg4 = 0 ;
  bool (*arg5)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (index_int *)(farg3);
  arg4 = (index_int *)(farg4);
  arg5 = (bool (*)(void *,void *))(*farg5);
  minmax_element_cmp< void * >((void *const *)arg1,arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT int _wrap_includes__SWIG_1(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t *)farg3->data;
  arg4 = farg3->size;
  result = (bool)includes< int32_t >((int32_t const *)arg1,arg2,(int32_t const *)arg3,arg4);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_2(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t *)farg3->data;
  arg4 = farg3->size;
  result = (bool)includes< int64_t >((int64_t const *)arg1,arg2,(int64_t const *)arg3,arg4);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_3(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double *)farg3->data;
  arg4 = farg3->size;
  result = (bool)includes< double >((double const *)arg1,arg2,(double const *)arg3,arg4);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_4(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(int32_t,int32_t)) {
  int fresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  size_t arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  size_t arg4 ;
  bool (*arg5)(int32_t,int32_t) = (bool (*)(int32_t,int32_t)) 0 ;
  bool result;
  
  arg1 = (int32_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int32_t *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(int32_t,int32_t))(*farg5);
  result = (bool)includes_cmp< int32_t >((int32_t const *)arg1,arg2,(int32_t const *)arg3,arg4,arg5);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_5(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(int64_t,int64_t)) {
  int fresult ;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  bool (*arg5)(int64_t,int64_t) = (bool (*)(int64_t,int64_t)) 0 ;
  bool result;
  
  arg1 = (int64_t *)farg1->data;
  arg2 = farg1->size;
  arg3 = (int64_t *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(int64_t,int64_t))(*farg5);
  result = (bool)includes_cmp< int64_t >((int64_t const *)arg1,arg2,(int64_t const *)arg3,arg4,arg5);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_6(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(double,double)) {
  int fresult ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  bool (*arg5)(double,double) = (bool (*)(double,double)) 0 ;
  bool result;
  
  arg1 = (double *)farg1->data;
  arg2 = farg1->size;
  arg3 = (double *)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(double,double))(*farg5);
  result = (bool)includes_cmp< double >((double const *)arg1,arg2,(double const *)arg3,arg4,arg5);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_includes__SWIG_7(SwigArrayWrapper *farg1, SwigArrayWrapper *farg3, bool (*farg5)(void *,void *)) {
  int fresult ;
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  void **arg3 = (void **) 0 ;
  size_t arg4 ;
  bool (*arg5)(void *,void *) = (bool (*)(void *,void *)) 0 ;
  bool result;
  
  arg1 = (void **)farg1->data;
  arg2 = farg1->size;
  arg3 = (void **)farg3->data;
  arg4 = farg3->size;
  arg5 = (bool (*)(void *,void *))(*farg5);
  result = (bool)includes_cmp< void * >((void *const *)arg1,arg2,(void *const *)arg3,arg4,arg5);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_shuffle__SWIG_1(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::mt19937 *arg1 = 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  size_t arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 &", "MersenneEngine4", "shuffle< int32_t >(std::mt19937 &,int32_t *,size_t)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (int32_t *)farg2->data;
  arg3 = farg2->size;
  shuffle< int32_t >(*arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_shuffle__SWIG_2(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::mt19937 *arg1 = 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  size_t arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 &", "MersenneEngine4", "shuffle< int64_t >(std::mt19937 &,int64_t *,size_t)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (int64_t *)farg2->data;
  arg3 = farg2->size;
  shuffle< int64_t >(*arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_shuffle__SWIG_3(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::mt19937 *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 &", "MersenneEngine4", "shuffle< double >(std::mt19937 &,double *,size_t)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (double *)farg2->data;
  arg3 = farg2->size;
  shuffle< double >(*arg1,arg2,arg3);
}


SWIGEXPORT void _wrap_shuffle__SWIG_4(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  std::mt19937 *arg1 = 0 ;
  void **arg2 = (void **) 0 ;
  size_t arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::mt19937 &", "MersenneEngine4", "shuffle< void * >(std::mt19937 &,void **,size_t)", return );
  arg1 = (std::mt19937 *)farg1->cptr;
  arg2 = (void **)farg2->data;
  arg3 = farg2->size;
  shuffle< void * >(*arg1,arg2,arg3);
}


} // extern

