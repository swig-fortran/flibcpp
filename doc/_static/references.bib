@article{beazley_automated_2003,
	title = {Automated scientific software scripting with {SWIG}},
	volume = {19},
	issn = {0167739X},
	url = {http://linkinghub.elsevier.com/retrieve/pii/S0167739X02001711},
	doi = {10.1016/S0167-739X(02)00171-1},
	abstract = {Scripting languages such as Python and Tcl are a powerful tool for the construction of ﬂexible scientiﬁc software because they provide scientists with an interpreted problem solving environment and they provide a modular framework for controlling software components written in C, C++, and Fortran. However, a common problem faced by the developers of a scripted scientiﬁc application is that of integrating compiled code with an interpreter. To solve this problem, an extensible compiler, simpliﬁed wrapper and interface generator (SWIG), has been developed to automate the task of integrating compiled code with scripting language interpreters. SWIG requires no modiﬁcations to existing code and uses existing source to create bindings for nine different target languages including Python, Perl, Tcl, Ruby, Guile, and Java. By automating language integration, SWIG enables scientists to use scripting languages at all stages of software development and allows existing software to be more easily integrated into a scripting environment. Although SWIG has been in use for more than 6 years, little has been published on its design and the underlying mechanisms that make it work. Therefore, the primary goal of this paper is to cover these topics.},
	language = {en},
	number = {5},
	urldate = {2018-09-06},
	journal = {Future Generation Computer Systems},
	author = {Beazley, D.M.},
	month = jul,
	year = {2003},
	pages = {599--609},
	file = {Beazley - 2003 - Automated scientific software scripting with SWIG.pdf:/Users/s3j/Zotero/storage/LKCUYK6D/Beazley - 2003 - Automated scientific software scripting with SWIG.pdf:application/pdf}
}

@article{mcinnes_how_2021,
	title = {How community software ecosystems can unlock the potential of exascale computing},
	volume = {1},
	issn = {2662-8457},
	url = {http://www.nature.com/articles/s43588-021-00033-y},
	doi = {10.1038/s43588-021-00033-y},
	language = {en},
	number = {2},
	urldate = {2021-05-22},
	journal = {Nature Computational Science},
	author = {McInnes, Lois Curfman and Heroux, Michael A. and Draeger, Erik W. and Siegel, Andrew and Coghlan, Susan and Antypas, Katie},
	month = feb,
	year = {2021},
	pages = {92--94},
	file = {McInnes et al. - 2021 - How community software ecosystems can unlock the p.pdf:/Users/s3j/Zotero/storage/T5G46MCK/McInnes et al. - 2021 - How community software ecosystems can unlock the p.pdf:application/pdf}
}

@article{johnson_automated_2020,
	title = {Automated {Fortran}-{C}++ {Bindings} for {Large}-{Scale} {Scientific} {Applications}},
	volume = {22},
	issn = {1521-9615, 1558-366X},
	url = {https://ieeexplore.ieee.org/document/8745480/},
	doi = {10.1109/MCSE.2019.2924204},
	abstract = {Although many active scientiﬁc codes use modern Fortran, most contemporary scientiﬁc software libraries are implemented in C and C++. Providing their numerical, algorithmic, or data management features to Fortran codes requires writing and maintaining substantial amounts of glue code. This article introduces a tool that automatically generates native Fortran 2003 interfaces to C and C++ libraries. The tool supports C++ features that have no direct Fortran analog, such as templated functions and exceptions. A set of simple examples demonstrate the utility and scope of the tool, and timing measurements with a mock numerical library illustrate the minimal performance impact of the generated wrapper code.},
	language = {en},
	number = {5},
	urldate = {2019-08-20},
	journal = {Computing in Science \& Engineering},
	author = {Johnson, Seth R. and Prokopenko, Andrey and Evans, Katherine J.},
	month = oct,
	year = {2020},
	pages = {84--94},
	file = {Johnson et al. - 2020 - Automated Fortran-C++ Bindings for Large-Scale Sci.pdf:/Users/s3j/Zotero/storage/IDWGIGJQ/Johnson et al. - 2020 - Automated Fortran-C++ Bindings for Large-Scale Sci.pdf:application/pdf}
}
